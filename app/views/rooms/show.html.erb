<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>OpenTok Getting Started</title>
    <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
    <script src="http://static.opentok.com/v0.91/js/TB.min.js"></script>

  </head>

  <body>
    <div id="containerStream" style="z-index:50; position:absolute; top:0px; left:0px;">
      <div id="streamDiv"></div>
    </div>

    <div id="containerPublisher" style="z-index:100; position:absolute; top:20px; left:20px; border:2px solid #fff;">
      <div id="myPublisherDiv"></div>
    </div>

    <div id="subscriberContainer"></div>

    <button id="recordButton">Start Recording</button>
    <script type="text/javascript">
var apiKey = '17075832';
var sessionId = "<%= @room.sessionId %>";
var token = "<%= @token %>";           
      var publisher, archive;
      var session = TB.initSession(sessionId);      

      TB.setLogLevel(TB.DEBUG);     

      session.addEventListener('sessionConnected', sessionConnectedHandler);
      session.addEventListener('streamCreated', streamCreatedHandler);      
      session.connect(apiKey, token);


      function sessionConnectedHandler(event) {
        console.log("SessionConnecteD!")
        publisher = TB.initPublisher( apiKey, 'myPublisherDiv' );
        session.publish(publisher);

        // Subscribe to streams that were in the session when we connected
        subscribeToStreams(event.streams);
      }

function streamCreatedHandler(event) {
  // Subscribe to any new streams that are created
  subscribeToStreams(event.streams);
}

  var i = 0;
function subscribeToStreams(streams) {
  for (var i = 0; i < streams.length; i++) {
    // Make sure we don't subscribe to ourself
    if (streams[i].connection.connectionId == session.connection.connectionId) {
      return;
    }

    var tempId = "stream"+i;
    i=i+1;
    var container = $('<div />', {id:"container"+i});
    var newDiv = $('<div />',{id:tempId});
    container.append(newDiv);
    $('#subscriberContainer').append(container);

    // Subscribe to the stream
    session.subscribe(streams[i],newDiv);
  }
}

// Everything to do with Archiving
$('#recordButton').click(function(){
    if( $(this).text() == 'Stop Recording' ){
    session.stopRecording(archive);
    $(this).text('Start Recording');
    }else{
    console.log(archive);
    session.startRecording(archive);
    $(this).text('Stop Recording');
    }
    });

session.addEventListener('sessionRecordingStopped', recordingStoppedHandler);      
function recordingStoppedHandler(event){
  console.log("Recording Stopped");
  console.log(event);
}
session.addEventListener('sessionRecordingStarted', recordingStartedHandler);      
function recordingStartedHandler(event){
  console.log("Recording Started");
  console.log(event);
}
session.addEventListener('archiveCreated', archiveCreatedHandler);      
function archiveCreatedHandler(event){
  console.log("Archive is created");
  console.log(event);
}

</script>
</body>
</html>